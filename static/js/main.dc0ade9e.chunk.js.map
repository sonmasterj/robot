{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Scroll.js","errorboundry.js","Appp.js","serviceWorker.js","index.js"],"names":["Card","props","name","id","email","className","alt","src","Cardlist","robots","cartComponent","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Errorboundry","state","hasError","error","info","this","setState","Component","Appp","onSearchChange","event","target","value","fetch","then","res","json","users","filterrobot","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2OAaeA,EAZJ,SAACC,GAAS,IACVC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,GAAIC,EAAOH,EAAPG,MACjB,OACG,yBAAKC,UAAU,yDACX,yBAAKC,IAAI,QAAQC,IAAK,wBAA0BJ,EAAK,aACrD,6BACI,4BAAKD,GACL,2BAAIE,MCIJI,EAVA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACPC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIM,EAAOI,GAAGV,GAAID,KAAMO,EAAOI,GAAGX,KAAME,MAAOK,EAAOI,GAAGT,WAElF,OACA,6BACIM,ICKOK,EAZC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAXI,G,MAPF,SAACpB,GACV,OACI,yBAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DxB,EAAMyB,YCgBJC,E,YAlBX,WAAY1B,GAAO,IAAD,8BACd,4CAAMA,KACD2B,MAAM,CACPC,UAAS,GAHC,E,+EAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACJ,8CAGCG,KAAK/B,MAAMyB,a,GAfHQ,aCoDZC,E,YA7CX,aAAc,IAAD,8BACT,+CAiBJC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACjB,YAAYqB,EAAMC,OAAOC,SAjBxC,EAAKX,MAAM,CACPnB,OAAO,GACPO,YAAY,IAJP,E,iFAQO,IAAD,OACfwB,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAAIC,UAEbF,MAAK,SAAAG,GACF,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAQrB,IAAD,OACEC,EAAYb,KAAKJ,MAAMnB,OAAOqC,QAAO,SAAArC,GACvC,OAAOA,EAAOP,KAAK6C,cAAcC,SAAS,EAAKpB,MAAMZ,YAAY+B,kBAErE,OAA8B,IAA3Bf,KAAKJ,MAAMnB,OAAOwC,OACT,uCAKJ,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,uBAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQoC,W,GAtC3BX,aCKCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MAECC,SAASC,eAAe,SDyHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.dc0ade9e.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props)=>{\r\n    const {name, id, email}=props;\r\n    return(\r\n       <div className=' tc bg-light-green br3 pa3 grow ma2 dib bw2 shadow-5 '>\r\n           <img alt='photo' src={'https://robohash.org/' + id + '?200x200'}/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n       </div> \r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst Cardlist=({robots})=>{\r\n    const cartComponent=robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return(\r\n    <div >\r\n       {cartComponent}\r\n    </div>\r\n    );\r\n}\r\nexport default Cardlist;","import React from 'react';\r\nconst Searchbox=({searchfield,searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'  \r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default Searchbox;","import React from 'react';\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React, {Component } from 'react';\r\nclass Errorboundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if(this.state.hasError){\r\n            return<h1>That has error</h1>\r\n        }\r\n        else{\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\nexport default Errorboundry;","import React,{Component} from 'react';\r\n// import {robots} from './robot';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\nimport './Appp.css';\r\nimport Scroll from './Scroll';\r\nimport Errorboundry from './errorboundry';\r\nclass Appp extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            robots:[],\r\n            searchfield:''\r\n        }\r\n    \r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res=>{\r\n           return res.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robots:users});\r\n        })\r\n        \r\n    }\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield:event.target.value});\r\n\r\n    }\r\n    render(){\r\n        const filterrobot=this.state.robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.robots.length===0){\r\n             return <h1>Loading</h1>\r\n        }\r\n        else\r\n        {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className=' green hover-red f1'>RobotFriend</h1>\r\n                    <Searchbox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <Errorboundry>\r\n                            <Cardlist robots={filterrobot}/>\r\n                        </Errorboundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default Appp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Appp from './Appp'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <Appp />\n    ,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}